import pdfplumber
import re
import io
from datetime import datetime
from typing import List, Dict, Any
import streamlit as st
import os

try:
    import fitz  # PyMuPDF para PDFs complexos
    from PIL import Image
    PDF_ADVANCED_AVAILABLE = True
except ImportError:
    PDF_ADVANCED_AVAILABLE = False

try:
    import easyocr
    EASYOCR_AVAILABLE = True
except ImportError:
    EASYOCR_AVAILABLE = False

class PDFProcessor:
    """Classe respons√°vel por processar PDFs e extrair transa√ß√µes banc√°rias"""
    
    def __init__(self, debug_mode: bool = False):
        self.debug_mode = debug_mode
        self.detected_year = None  # Ano detectado
        self.last_date_context = None  # √öltima data processada (para contexto entre p√°ginas)
        # Padr√µes regex para diferentes formatos de data (melhorados para extratos banc√°rios)
        self.date_patterns = [
            # Padr√µes priorit√°rios - mais espec√≠ficos para extratos
            r'^(\d{2})/(\d{2})/(\d{4})',            # DD/MM/YYYY no in√≠cio da linha
            r'^(\d{2})/(\d{2})/(\d{2})',            # DD/MM/YY no in√≠cio da linha
            r'^(\d{1,2})/(\d{1,2})/(\d{4})',        # D/M/YYYY no in√≠cio da linha
            r'^(\d{2})/(\d{2})\s',                  # DD/MM seguido de espa√ßo no in√≠cio
            r'^(\d{1,2})/(\d{1,2})\s',              # D/M seguido de espa√ßo no in√≠cio
            
            # Padr√µes contextuais - com palavras ao redor
            r'data[:\s]+(\d{2})/(\d{2})/(\d{4})',   # "Data: 01/07/2025"
            r'em[:\s]+(\d{2})/(\d{2})/(\d{4})',     # "Em: 01/07/2025"
            
            # Padr√µes gerais (menor prioridade)
            r'(\d{2})/(\d{2})/(\d{4})',             # DD/MM/YYYY (geral)
            r'(\d{2})/(\d{2})/(\d{2})',             # DD/MM/YY (geral)
            r'(\d{1,2})/(\d{1,2})/(\d{4})',         # D/M/YYYY (geral)
            r'(\d{2})/(\d{2})\b',                   # DD/MM (geral)
            r'(\d{1,2})/(\d{1,2})\b',               # D/M (geral)
        ]
        
        # Padr√µes para valores monet√°rios (mais abrangentes para capturar mais transa√ß√µes)
        self.value_patterns = [
            r'R\$\s*(\d{1,3}(?:\.\d{3})*,\d{2})',               # R$ 1.000,00 (obrigat√≥rio 2 decimais)
            r'(\d{1,3}(?:\.\d{3})*,\d{2})(?!\d)',               # 1.000,00 (obrigat√≥rio 2 decimais, n√£o seguido de d√≠gito)
            r'(\d{4,},\d{2})(?!\d)',                            # 491511,00 (valores grandes, n√£o seguido de d√≠gito)
            r'R\$\s*(\d+,\d{2})',                               # R$ 123,45 (formato simples)
            r'(\d+,\d{2})(?=\s|$)',                             # 123,45 (no final da linha ou seguido de espa√ßo)
        ]
        
        # Palavras-chave para identificar tipos de transa√ß√£o
        self.credit_keywords = [
            'cr√©dito', 'credito', 'entrada', 'dep√≥sito', 'deposito', 
            'transfer√™ncia recebida', 'pix recebido', 'ted recebida',
            'doc recebido', 'sal√°rio', 'salario', 'rendimento'
        ]
        
        self.debit_keywords = [
            'd√©bito', 'debito', 'sa√≠da', 'saque', 'pagamento',
            'transfer√™ncia enviada', 'pix enviado', 'ted enviada',
            'doc enviado', 'compra', 'taxa', 'tarifa'
        ]

    def _detect_statement_year(self, text: str) -> int:
        """Detecta automaticamente o ano do extrato baseado em m√∫ltiplas estrat√©gias"""
        
        current_year = datetime.now().year
        
        # Estrat√©gia 1: Procurar por padr√µes espec√≠ficos de cabe√ßalho de extrato
        header_patterns = [
            r'extrato.*?(\d{4})',                       # "Extrato ... 2025"
            r'per√≠odo.*?(\d{1,2}/\d{1,2}/(\d{4}))',     # "Per√≠odo: 01/07/2025"
            r'movimenta√ß√£o.*?(\d{4})',                  # "Movimenta√ß√£o 2025"
            r'julho.*?(\d{4})',                         # "Julho 2025"
            r'(\d{4}).*?julho',                         # "2025 Julho"
            r'(\d{4})\s*-\s*\d{1,2}',                   # "2025 - 07" (formato comum)
            r'(\d{1,2}/\d{1,2}/(\d{4}))\s*a\s*\d{1,2}/\d{1,2}/\d{4}',  # "01/07/2025 a 31/07/2025"
        ]
        
        # Tentar encontrar ano em cabe√ßalhos primeiro (mais confi√°vel)
        for pattern in header_patterns:
            matches = re.findall(pattern, text.lower(), re.IGNORECASE)
            for match in matches:
                try:
                    # Se match √© tupla, pegar o √∫ltimo elemento (ano)
                    year_candidate = match[-1] if isinstance(match, tuple) else match
                    year_int = int(year_candidate)
                    if 2020 <= year_int <= current_year + 1:
                        return year_int
                except (ValueError, IndexError):
                    continue
        
        # Estrat√©gia 2: Analisar padr√£o de datas no documento
        # Procurar por datas completas e contar frequ√™ncia de anos
        full_date_pattern = r'(\d{1,2})/(\d{1,2})/(\d{4})'
        date_matches = re.findall(full_date_pattern, text)
        
        year_frequency = {}
        recent_years_bonus = {}
        
        for day, month, year in date_matches:
            try:
                day_int, month_int, year_int = int(day), int(month), int(year)
                
                # Validar se √© uma data real
                if 1 <= day_int <= 31 and 1 <= month_int <= 12 and 2020 <= year_int <= current_year + 1:
                    year_frequency[year_int] = year_frequency.get(year_int, 0) + 1
                    
                    # Dar b√¥nus para anos mais recentes (mais prov√°vel de ser o ano correto)
                    if year_int >= current_year - 1:
                        recent_years_bonus[year_int] = recent_years_bonus.get(year_int, 0) + 2
                        
            except ValueError:
                continue
        
        # Combinar frequ√™ncia normal com b√¥nus para anos recentes
        for year, bonus in recent_years_bonus.items():
            year_frequency[year] = year_frequency.get(year, 0) + bonus
        
        if year_frequency:
            # Pegar o ano com maior frequ√™ncia (incluindo b√¥nus)
            most_likely_year = max(year_frequency.items(), key=lambda x: x[1])[0]
            return most_likely_year
        
        # Estrat√©gia 3: Se nada funcionou, assumir ano atual
        return current_year

    def extract_transactions(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """Extrai transa√ß√µes do arquivo PDF usando m√∫ltiplas estrat√©gias"""
        
        st.info("üîç **Iniciando an√°lise do PDF...**")
        
        # Resetar posi√ß√£o do arquivo
        uploaded_file.seek(0)
        
        # NOVO: Detectar o ano do extrato primeiro
        current_year = datetime.now().year
        try:
            # Ler uma amostra do PDF para detectar o ano
            with pdfplumber.open(uploaded_file) as pdf:
                sample_text = ""
                # Ler as primeiras 3 p√°ginas para detectar o ano
                for page_num in range(min(3, len(pdf.pages))):
                    page = pdf.pages[page_num]
                    page_text = page.extract_text()
                    if page_text:
                        sample_text += page_text[:2000]  # Primeiros 2000 caracteres de cada p√°gina
                
                # Detectar o ano do extrato
                self.detected_year = self._detect_statement_year(sample_text)
                
                # CORRE√á√ÉO: Se detectou muitos anos antigos (como 2015), for√ßar ano atual
                # Isso acontece quando h√° muito texto informativo com datas antigas
                if self.detected_year < 2024:
                    st.warning(f"‚ö†Ô∏è Ano {self.detected_year} detectado parece muito antigo. For√ßando para {current_year}.")
                    self.detected_year = current_year
                
                st.info(f"üìÖ **Ano detectado do extrato:** {self.detected_year}")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro na detec√ß√£o do ano: {str(e)}")
            self.detected_year = datetime.now().year
        
        # Resetar posi√ß√£o ap√≥s a detec√ß√£o
        uploaded_file.seek(0)
        
        # Estrat√©gia 1: Tentar com pdfplumber (mais confi√°vel para texto)
        try:
            status_text.text("üìñ Tentando extra√ß√£o de texto padr√£o...")
            transactions = self._extract_with_pdfplumber(uploaded_file, progress_bar, status_text)
            
            if transactions:
                st.success(f"‚úÖ **Extra√ß√£o bem-sucedida!** {len(transactions)} transa√ß√µes encontradas")
                return transactions
            else:
                st.warning("‚ö†Ô∏è Nenhuma transa√ß√£o encontrada com m√©todo padr√£o")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro na extra√ß√£o padr√£o: {str(e)}")
        
        # Estrat√©gia 2: Tentar extra√ß√£o avan√ßada com PyMuPDF
        if PDF_ADVANCED_AVAILABLE:
            try:
                uploaded_file.seek(0)
                status_text.text("üîß Tentando extra√ß√£o avan√ßada...")
                transactions = self._extract_with_pymupdf(uploaded_file, progress_bar, status_text)
                
                if transactions:
                    st.success(f"‚úÖ **Extra√ß√£o avan√ßada bem-sucedida!** {len(transactions)} transa√ß√µes encontradas")
                    return transactions
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro na extra√ß√£o avan√ßada: {str(e)}")
        
        # Estrat√©gia 3: Tentar OCR com EasyOCR para PDFs escaneados
        if EASYOCR_AVAILABLE:
            try:
                uploaded_file.seek(0)
                status_text.text("ü§ñ Tentando OCR para PDF escaneado...")
                transactions = self._extract_with_easyocr(uploaded_file, progress_bar, status_text)
                
                if transactions:
                    st.success(f"‚úÖ **OCR bem-sucedido!** {len(transactions)} transa√ß√µes encontradas")
                    return transactions
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro no OCR: {str(e)}")
        else:
            st.info("üí° **Para PDFs escaneados**: Instale `pip install easyocr` para ativar OCR autom√°tico")
        
        # Se chegou aqui, nenhum m√©todo funcionou
        self._show_pdf_help()
        return []

    def _extract_with_pdfplumber(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """Extra√ß√£o usando pdfplumber (m√©todo principal)"""
        
        uploaded_file.seek(0)
        
        with pdfplumber.open(uploaded_file) as pdf:
            total_pages = len(pdf.pages)
            
            if total_pages > 10:
                st.info(f"üìÑ **Processando PDF grande** ({total_pages} p√°ginas) - isso pode demorar...")
            
            all_transactions = []
            self.last_date_context = None  # Reset context for new document
            
            for page_num, page in enumerate(pdf.pages):
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                status_text.text(f"üìñ Processando p√°gina {page_num + 1}/{total_pages}...")
                
                try:
                    # Extrair texto da p√°gina
                    text = page.extract_text()
                    
                    if text and text.strip():
                        # Usar an√°lise estruturada com contexto de data
                        page_transactions = self._extract_structured_data_with_context(
                            text, 
                            self.debug_mode
                        )
                        
                        # Se encontrou poucas transa√ß√µes, usar m√©todo original como fallback
                        if len(page_transactions) < 3:
                            if self.debug_mode:
                                st.write("üîÑ **Usando m√©todo de fallback para esta p√°gina...**")
                            
                            fallback_transactions = self._parse_transactions_batch(
                                text, 
                                f"P√°gina {page_num + 1}",
                                self.debug_mode
                            )
                            
                            # Se o fallback encontrou mais transa√ß√µes, usar ele
                            if len(fallback_transactions) > len(page_transactions):
                                page_transactions = fallback_transactions
                        
                        all_transactions.extend(page_transactions)
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erro na p√°gina {page_num + 1}: {str(e)}")
                    continue
            
            return self._clean_and_sort_transactions(all_transactions)

    def _extract_with_pymupdf(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """Extra√ß√£o usando PyMuPDF para PDFs complexos"""
        
        if not PDF_ADVANCED_AVAILABLE:
            return []
            
        uploaded_file.seek(0)
        
        try:
            doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
            total_pages = len(doc)
            
            all_transactions = []
            self.last_date_context = None  # Reset context for new document
            
            for page_num in range(total_pages):
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                status_text.text(f"üîß Processando p√°gina {page_num + 1}/{total_pages} (avan√ßado)...")
                
                try:
                    page = doc[page_num]
                    
                    # Tentar extrair texto
                    text = page.get_text()
                    
                    # Se n√£o h√° texto ou muito pouco, tentar m√©todos alternativos
                    if not text or len(text.strip()) < 50:
                        # Tentar extrair texto com diferentes m√©todos
                        text = page.get_text("text")
                        
                        if not text or len(text.strip()) < 50:
                            # Informar que √© prov√°vel PDF escaneado
                            st.warning(f"‚ö†Ô∏è P√°gina {page_num + 1}: Pouco texto detectado - poss√≠vel PDF escaneado")
                            continue
                    
                    if text and text.strip():
                        # Usar extra√ß√£o com contexto de data
                        page_transactions = self._extract_structured_data_with_context(
                            text, 
                            self.debug_mode
                        )
                        
                        # Se encontrou poucas transa√ß√µes, usar m√©todo de fallback  
                        if len(page_transactions) < 3:
                            fallback_transactions = self._parse_transactions_batch(
                                text, 
                                f"P√°gina {page_num + 1} (Avan√ßado)",
                                self.debug_mode
                            )
                            
                            if len(fallback_transactions) > len(page_transactions):
                                page_transactions = fallback_transactions
                        
                        all_transactions.extend(page_transactions)
                        
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erro avan√ßado na p√°gina {page_num + 1}: {str(e)}")
                    continue
            
            doc.close()
            return self._clean_and_sort_transactions(all_transactions)
            
        except Exception as e:
            st.error(f"‚ùå Erro no processamento avan√ßado: {str(e)}")
            return []

    def _extract_with_easyocr(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """Extra√ß√£o usando EasyOCR para PDFs escaneados"""
        
        if not EASYOCR_AVAILABLE:
            st.warning("‚ö†Ô∏è EasyOCR n√£o instalado. Execute: `pip install easyocr`")
            return []
            
        uploaded_file.seek(0)
        
        try:
            # Inicializar EasyOCR
            st.info("ü§ñ **Inicializando EasyOCR** (pode demorar na primeira vez)...")
            reader = easyocr.Reader(['pt', 'en'], gpu=False)  # Portugu√™s e Ingl√™s, sem GPU
            
            doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
            total_pages = len(doc)
            
            st.info(f"üìÑ **Processando {total_pages} p√°ginas com OCR** - isso pode demorar...")
            
            all_transactions = []
            
            for page_num in range(total_pages):
                progress = (page_num + 1) / total_pages
                progress_bar.progress(progress)
                status_text.text(f"ü§ñ OCR p√°gina {page_num + 1}/{total_pages}...")
                
                try:
                    page = doc[page_num]
                    
                    # Converter p√°gina para imagem
                    mat = fitz.Matrix(2.0, 2.0)  # 2x zoom para melhor qualidade OCR
                    pix = page.get_pixmap(matrix=mat)
                    img_data = pix.tobytes("png")
                    
                    # Converter para PIL Image
                    image = Image.open(io.BytesIO(img_data))
                    
                    # Aplicar OCR
                    results = reader.readtext(image)
                    
                    # Extrair texto das detec√ß√µes
                    page_text = ""
                    for (bbox, text, confidence) in results:
                        if confidence > 0.5:  # Filtrar detec√ß√µes com baixa confian√ßa
                            page_text += text + " "
                    
                    # Processar texto extra√≠do
                    if page_text.strip():
                        page_transactions = self._parse_transactions_batch(
                            page_text, 
                            f"OCR P√°gina {page_num + 1}",
                            self.debug_mode
                        )
                        all_transactions.extend(page_transactions)
                        
                        if page_transactions:
                            st.success(f"‚úÖ P√°gina {page_num + 1}: {len(page_transactions)} transa√ß√µes encontradas via OCR")
                    else:
                        st.warning(f"‚ö†Ô∏è P√°gina {page_num + 1}: Nenhum texto detectado")
                        
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erro OCR na p√°gina {page_num + 1}: {str(e)}")
                    continue
            
            doc.close()
            
            transactions = self._clean_and_sort_transactions(all_transactions)
            
            if total_pages > 5:
                st.info(f"ü§ñ **OCR Conclu√≠do:** {total_pages} p√°ginas processadas, {len(transactions)} transa√ß√µes encontradas")
                
            return transactions
            
        except Exception as e:
            st.error(f"‚ùå Erro geral no OCR: {str(e)}")
            return []

    def _extract_structured_data(self, text: str, debug_mode: bool = False) -> List[Dict[str, Any]]:
        """Extrai dados estruturados do PDF usando an√°lise posicional e contextual"""
        
        if debug_mode:
            st.write("üîç **An√°lise estruturada do PDF:**")
        
        lines = text.split('\n')
        transactions = []
        current_date = None
        
        # Pr√©-processar linhas para identificar padr√µes de layout
        processed_lines = []
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            processed_lines.append({
                'index': i,
                'text': line,
                'has_date': bool(self._extract_date(line)),
                'has_value': bool(self._extract_all_values(line)),
                'length': len(line),
                'words': line.split()
            })
        
        if debug_mode:
            st.write(f"üìù **{len(processed_lines)} linhas processadas**")
        
        # Estrat√©gia 1: Buscar por padr√µes de data no in√≠cio das linhas
        for proc_line in processed_lines:
            line_text = proc_line['text']
            
            # Verificar se √© uma linha de data (come√ßa com data)
            date_at_start = self._extract_date_at_start(line_text)
            if date_at_start:
                current_date = date_at_start
                if debug_mode:
                    st.write(f"üìÖ **Data encontrada:** {current_date} na linha: `{line_text}`")
                continue
            
            # Se temos uma data atual, verificar se a linha √© uma transa√ß√£o
            if current_date:
                transaction = self._parse_transaction_line(line_text, current_date)
                if transaction:
                    transactions.append(transaction)
                    if debug_mode:
                        st.write(f"‚úÖ **Transa√ß√£o:** {transaction['tipo']} R$ {transaction['valor']:.2f}")
                        st.write(f"   Linha: `{line_text}`")
        
        # Estrat√©gia 2: Se poucas transa√ß√µes foram encontradas, tentar an√°lise por blocos
        if len(transactions) < 5:
            if debug_mode:
                st.write("üîÑ **Poucas transa√ß√µes encontradas. Tentando an√°lise por blocos...**")
            
            additional_transactions = self._extract_by_blocks(text, debug_mode)
            transactions.extend(additional_transactions)
        
        return transactions

    def _extract_structured_data_with_context(self, text: str, debug_mode: bool = False) -> List[Dict[str, Any]]:
        """Extrai dados estruturados mantendo contexto de data entre p√°ginas"""
        
        if debug_mode:
            st.write("üîç **An√°lise estruturada com contexto:**")
        
        lines = text.split('\n')
        transactions = []
        current_date = self.last_date_context  # Usar √∫ltimo contexto de data
        
        # Pr√©-processar linhas para identificar padr√µes de layout
        processed_lines = []
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            processed_lines.append({
                'index': i,
                'text': line,
                'has_date': bool(self._extract_date(line)),
                'has_value': bool(self._extract_all_values(line)),
                'length': len(line),
                'words': line.split()
            })
        
        if debug_mode:
            st.write(f"üìù **{len(processed_lines)} linhas processadas**")
            if current_date:
                st.write(f"üìÖ **Contexto inicial:** {current_date}")
        
        # Estrat√©gia 1: Buscar por padr√µes de data no in√≠cio das linhas
        for proc_line in processed_lines:
            line_text = proc_line['text']
            
            # Verificar se √© uma linha de data (come√ßa com data)
            date_at_start = self._extract_date_at_start(line_text)
            if date_at_start:
                current_date = date_at_start
                self.last_date_context = current_date  # Atualizar contexto global
                if debug_mode:
                    st.write(f"üìÖ **Data encontrada:** {current_date} na linha: `{line_text}`")
                # N√ÉO fazer continue - verificar se a linha tamb√©m √© uma transa√ß√£o
            
            # Se temos uma data atual, verificar se a linha √© uma transa√ß√£o
            if current_date:
                transaction = self._parse_transaction_line(line_text, current_date)
                if transaction:
                    transactions.append(transaction)
                    if debug_mode:
                        st.write(f"‚úÖ **Transa√ß√£o:** {transaction['tipo']} R$ {transaction['valor']:.2f}")
                        st.write(f"   Linha: `{line_text}`")
        
        # Estrat√©gia 2: Se poucas transa√ß√µes foram encontradas, tentar an√°lise por blocos
        if len(transactions) < 5:
            if debug_mode:
                st.write("üîÑ **Poucas transa√ß√µes encontradas. Tentando an√°lise por blocos...**")
            
            additional_transactions = self._extract_by_blocks_with_context(text, current_date, debug_mode)
            transactions.extend(additional_transactions)
        
        # Atualizar contexto global com a √∫ltima data usada
        if current_date:
            self.last_date_context = current_date
        
        return transactions

    def _extract_by_blocks_with_context(self, text: str, context_date: str, debug_mode: bool = False) -> List[Dict[str, Any]]:
        """Extrai transa√ß√µes por blocos usando contexto de data"""
        
        transactions = []
        lines = text.split('\n')
        current_date = context_date
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # Verificar se linha tem nova data
            date_match = self._extract_date(line)
            if date_match:
                current_date = date_match
                self.last_date_context = current_date
                continue
            
            # Se tem data atual, tentar extrair transa√ß√£o
            if current_date:
                transaction = self._parse_transaction_line(line, current_date)
                if transaction:
                    transactions.append(transaction)
                    if debug_mode:
                        st.write(f"üîç **Bloco:** {transaction['tipo']} R$ {transaction['valor']:.2f}")
        
        return transactions

    def _parse_with_date_context(self, text: str, context_date: str) -> List[Dict[str, Any]]:
        """M√©todo auxiliar para parsing com contexto de data espec√≠fico"""
        
        self.last_date_context = context_date
        return self._extract_structured_data_with_context(text, debug_mode=False)

    def _extract_date_at_start(self, line: str) -> str:
        """Extrai data especificamente do in√≠cio da linha"""
        
        # Padr√µes para datas no in√≠cio da linha
        start_patterns = [
            r'^(\d{2})/(\d{2})/(\d{4})',    # DD/MM/YYYY
            r'^(\d{2})/(\d{2})/(\d{2})',    # DD/MM/YY  
            r'^(\d{1,2})/(\d{1,2})/(\d{4})', # D/M/YYYY
            r'^(\d{2})/(\d{2})\s',          # DD/MM seguido de espa√ßo
            r'^(\d{1,2})/(\d{1,2})\s',      # D/M seguido de espa√ßo
        ]
        
        for pattern in start_patterns:
            match = re.search(pattern, line.strip())
            if match:
                try:
                    groups = match.groups()
                    if len(groups) == 2:
                        day, month = groups
                        statement_year = self.detected_year if self.detected_year else datetime.now().year
                        year = str(statement_year)
                    elif len(groups) == 3:
                        day, month, year = groups
                        if len(year) == 2:
                            year_int = int(year)
                            if year_int <= 50:
                                year = f"20{year}"
                            else:
                                year = f"19{year}"
                    
                    # Validar data
                    day_int = int(day)
                    month_int = int(month)
                    year_int = int(year)
                    
                    if 1 <= day_int <= 31 and 1 <= month_int <= 12:
                        try:
                            test_date = datetime(year_int, month_int, day_int)
                            return f"{day.zfill(2)}/{month.zfill(2)}/{year}"
                        except ValueError:
                            continue
                            
                except (ValueError, IndexError):
                    continue
        
        return None

    def _extract_by_blocks(self, text: str, debug_mode: bool = False) -> List[Dict[str, Any]]:
        """Extrai transa√ß√µes analisando blocos de texto relacionados"""
        
        transactions = []
        
        # Dividir texto em blocos baseados em padr√µes de transa√ß√£o
        transaction_blocks = re.split(r'\n(?=\d{2}/\d{2})', text)
        
        for block in transaction_blocks:
            if not block.strip():
                continue
                
            # Tentar extrair data e transa√ß√µes do bloco
            lines = block.strip().split('\n')
            if not lines:
                continue
                
            first_line = lines[0].strip()
            block_date = self._extract_date_at_start(first_line)
            
            if block_date:
                # Analisar todas as linhas do bloco
                for line in lines:
                    transaction = self._parse_transaction_line(line.strip(), block_date)
                    if transaction:
                        transactions.append(transaction)
                        if debug_mode:
                            st.write(f"üîç **Bloco:** {transaction['tipo']} R$ {transaction['valor']:.2f}")
        
        return transactions

    def _parse_transactions_batch(self, text: str, batch_name: str, debug_mode: bool = False) -> List[Dict[str, Any]]:
        """Analisa um bloco de texto e extrai transa√ß√µes"""
        
        transactions = []
        lines = text.split('\n')
        
        if debug_mode:
            st.write(f"üîç **Debug - {batch_name}:**")
            st.write(f"üìÑ Total de linhas encontradas: {len(lines)}")
        
        current_date = None
        processed_lines = []
        
        for line_num, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            
            # Armazenar linha para debug
            processed_lines.append(f"Linha {line_num + 1}: {line}")
            
            # Verificar se h√° uma data na linha
            date_found = self._extract_date(line)
            if date_found:
                current_date = date_found
                if debug_mode:
                    st.success(f"üìÖ Data encontrada na linha {line_num + 1}: {date_found}")
                    st.code(line)
            
            # Procurar por transa√ß√µes na linha
            transaction_info = self._parse_transaction_line(line, current_date)
            if transaction_info:
                transaction_info['fonte'] = batch_name
                transaction_info['linha'] = line_num + 1
                transactions.append(transaction_info)
                
                if debug_mode:
                    st.info(f"üí∞ Transa√ß√£o encontrada na linha {line_num + 1}:")
                    st.json(transaction_info)
                    st.code(line)
            elif debug_mode:
                # Mostrar por que a linha foi ignorada para debug
                has_values = bool(self._extract_all_values(line))
                has_date = bool(self._extract_date(line))
                if has_values or has_date or any(word in line.lower() for word in ['pix', 'ted', 'transferencia']):
                    st.warning(f"‚ö†Ô∏è Linha {line_num + 1} ignorada (valores: {has_values}, data: {has_date}):")
                    st.code(line)
        
        # Mostrar resumo do debug
        if debug_mode:
            st.write("üìã **Resumo da an√°lise:**")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Linhas processadas", len(processed_lines))
                st.metric("Transa√ß√µes encontradas", len(transactions))
            with col2:
                if current_date:
                    st.metric("√öltima data detectada", current_date)
                else:
                    st.warning("Nenhuma data detectada")
            
            # Mostrar algumas linhas para an√°lise
            with st.expander("üîç Ver todas as linhas processadas"):
                for proc_line in processed_lines[:50]:  # Mostrar at√© 50 linhas
                    st.text(proc_line)
                if len(processed_lines) > 50:
                    st.info(f"... e mais {len(processed_lines) - 50} linhas")
        
        return transactions

    def _parse_transaction_line(self, line: str, current_date: str = None) -> Dict[str, Any]:
        """Analisa uma linha e tenta extrair informa√ß√µes de transa√ß√£o"""
        
        line_lower = line.lower()
        line_clean = line.strip()
        
        # Filtros mais rigorosos para ignorar linhas que claramente n√£o s√£o transa√ß√µes
        ignore_patterns = [
            r'p√°gina?\s*[:.]?\s*\d+',                    # "p√°gina: 66", "pagina:66/69", etc.
            r'pagina?\s*[:.]?\s*\d+',                    # "pagina: 66", "pagina:66/69", etc.
            r'\bpagina?\s*[:.]?\s*\d+/\d+',              # "pagina:66/69", "p√°gina 66/69"
            r'^\d+$',                                    # apenas n√∫meros isolados
            r'^\d+/\d+$',                                # padr√µes como "66/69"
            r'banco\s+',                                 # cabe√ßalhos de banco
            r'extrato\s+',                               # cabe√ßalhos de extrato
            r'conta\s+corrente',                         # tipo de conta
            r'saldo\s+(anterior|atual)',                 # saldos
            r'total\s+',                                 # totais
            r'^\s*[-=]+\s*$',                           # linhas separadoras
            r'agencia\s*\d+',                            # informa√ß√µes de ag√™ncia
            r'conta\s*\d+',                              # informa√ß√µes de conta
            r'cpf\s*[:.]?\s*\d',                        # informa√ß√µes de CPF
            r'cnpj\s*[:.]?\s*\d',                       # informa√ß√µes de CNPJ
            r'^\d+\s*$',                                # n√∫meros isolados com espa√ßos
            r'desconsidere\s+esta\s+informa√ß√£o',        # Texto informativo espec√≠fico
            r'v√°lido\s+para\s+clientes',                # Texto informativo espec√≠fico
            r'se\s+o\s+limite\s+de\s+cr√©dito',          # Texto informativo espec√≠fico
            r'tarifa\s+pela\s+disponibiliza√ß√£o',        # Texto informativo espec√≠fico
            r'cheque\s+empresa\s+plus',                 # Texto informativo espec√≠fico
            r'santander\s+master',                      # Texto informativo espec√≠fico
            r'hip√≥teses?\s*:',                          # Listas de hip√≥teses
            r'durante\s+do\s+prazo',                    # Texto de termos e condi√ß√µes
            r'per√≠odo\s+de\s+vig√™ncia',                 # Texto de termos e condi√ß√µes
            r'emitente',                                # Refer√™ncias ao emitente
            r'ccgpj\s+\d+',                            # C√≥digos banc√°rios espec√≠ficos
            r'v\s+\d+,\d+\s+\d+',                     # Padr√µes de c√≥digos "v 1,00 510.071,00"
            r'\d{12,}',                                # N√∫meros muito longos (c√≥digos)
        ]
        
        # Verificar se a linha deve ser ignorada
        for pattern in ignore_patterns:
            if re.search(pattern, line_lower):
                return None
        
        # Verificar se a linha cont√©m indicadores reais de transa√ß√£o banc√°ria
        transaction_indicators = [
            'pix', 'ted', 'doc', 'transferencia', 'transfer√™ncia',
            'saque', 'deposito', 'dep√≥sito', 'pagamento', 'recebimento',
            'debito', 'd√©bito', 'credito', 'cr√©dito', 'tarifa', 'taxa',
            'compra', 'fornec', 'checkout', 'talao', 'tal√£o', 'ccgpj',
            'giro', 'cdc', 'fgi', 'peac', 'limite', 'certifica√ß√£o',
            # Adicionar mais indicadores comuns
            'enviado', 'recebido', 'cartao', 'cart√£o', 'conta',
            'banco', 'agencia', 'ag√™ncia', 'compensacao', 'compensa√ß√£o',
            'cheque', 'boleto', 'fatura', 'parcela', 'juros',
            'multa', 'desconto', 'cashback', 'estorno', 'devolucao',
            'devolu√ß√£o', 'ordem', 'servico', 'servi√ßo'
        ]
        
        has_transaction_indicator = any(indicator in line_lower for indicator in transaction_indicators)
        
        # Extrair valores da linha (deve ter pelo menos um valor v√°lido)
        values = self._extract_all_values(line_clean)
        
        # Se n√£o tem valores ou indicadores, ignorar
        if not values and not has_transaction_indicator:
            return None
            
        # Se tem valores, filtrar os significativos
        if values:
            # Filtrar valores muito pequenos ou muito grandes (poss√≠veis c√≥digos/erros)
            significant_values = [v for v in values if 1.0 <= v <= 50000000.0]
            
            if not significant_values:
                return None
            
            # Se n√£o tem indicador de transa√ß√£o e valor parece suspeito, ignorar
            if not has_transaction_indicator:
                max_value = max(significant_values)
                # Valores redondos pequenos sem contexto s√£o suspeitos (como p√°gina 69 = R$ 69,00)
                if max_value < 1000.0 and max_value == int(max_value):
                    return None
        else:
            # Se n√£o tem valores mas tem indicadores, pode ser linha informativa
            return None
        
        # Extrair data da linha se dispon√≠vel
        line_date = self._extract_date(line_clean)
        if line_date:
            current_date = line_date
        
        if not current_date:
            return None
        
        # Determinar tipo de transa√ß√£o baseado em palavras-chave mais espec√≠ficas
        credit_keywords = ['recebido', 'recebimento', 'credito', 'cr√©dito', 'dep√≥sito', 'deposito', 'entrada']
        debit_keywords = ['pago', 'pagamento', 'saque', 'debito', 'd√©bito', 'tarifa', 'taxa', 'compra', 'saida']
        
        has_credit = any(keyword in line_lower for keyword in credit_keywords)
        has_debit = any(keyword in line_lower for keyword in debit_keywords)
        
        if has_credit:
            transaction_type = 'Cr√©dito'
        elif has_debit:
            transaction_type = 'D√©bito'
        else:
            # Inferir pelo contexto da linha ou assumir cr√©dito como padr√£o
            transaction_type = 'Cr√©dito'
        
        # Usar o maior valor significativo encontrado
        value = max(significant_values)
        
        return {
            'data': current_date,
            'tipo': transaction_type,
            'valor': value,
            'descricao': line_clean,
            'linha_original': line_clean
        }

    def _extract_date(self, text: str) -> str:
        """Extrai data do texto usando m√∫ltiplos padr√µes melhorados com valida√ß√£o rigorosa"""
        
        # Limpar texto de caracteres especiais que podem interferir
        clean_text = re.sub(r'[^\w\s/.-]', ' ', text)
        
        # Verificar se a linha cont√©m padr√µes que N√ÉO s√£o datas v√°lidas
        invalid_patterns = [
            r'pix\s+\d+',                        # "PIX 12345"
            r'\d{10,}',                          # N√∫meros muito longos
            r'conta\s+\d+',                      # "conta 12345"
            r'agencia\s+\d+',                    # "agencia 1234"
            r'codigo\s+\d+',                     # "codigo 123"
            r'ref\s*[:.]?\s*\d+',               # "ref: 12345"
            r'documento\s+\d+',                  # "documento 123"
            r'seq\s*[:.]?\s*\d+',               # "seq: 123"
            r'\b\d{6,}\b',                       # C√≥digos de 6+ d√≠gitos
            r'valor\s+\d+',                      # "valor 12345"
            r'protocolo\s+\d+',                  # "protocolo 123"
            r'autenticacao\s+\d+',               # "autenticacao 123"
            r'comprovante\s+\d+',                # "comprovante 123"
        ]
        
        # Se cont√©m padr√µes inv√°lidos, n√£o tentar extrair data
        for invalid_pattern in invalid_patterns:
            if re.search(invalid_pattern, clean_text.lower()):
                return None
        
        current_year = datetime.now().year
        
        for pattern in self.date_patterns:
            match = re.search(pattern, clean_text)
            if match:
                try:
                    groups = match.groups()
                    
                    # Verificar se temos 2 ou 3 grupos (dia/m√™s ou dia/m√™s/ano)
                    if len(groups) == 2:
                        day, month = groups
                        # Usar o ano detectado do extrato
                        statement_year = self.detected_year if self.detected_year else current_year
                        year = str(statement_year)
                    elif len(groups) == 3:
                        day, month, year = groups
                        
                        # Converter ano de 2 d√≠gitos para 4 d√≠gitos
                        if len(year) == 2:
                            year_int = int(year)
                            # Para extratos banc√°rios recentes, assumir 20XX
                            if year_int <= 50:
                                year = f"20{year}"
                            else:
                                year = f"19{year}"
                        else:
                            # Para anos de 4 d√≠gitos, verificar consist√™ncia com ano detectado
                            year_int = int(year)
                            statement_year = self.detected_year if self.detected_year else current_year
                            # Se difere muito do ano detectado, usar o ano detectado
                            if abs(year_int - statement_year) > 1:
                                year = str(statement_year)
                    else:
                        continue
                    
                    # Validar valores de dia e m√™s
                    day_int = int(day)
                    month_int = int(month)
                    year_int = int(year)
                    
                    if not (1 <= day_int <= 31 and 1 <= month_int <= 12):
                        continue
                    
                    # Verificar se √© uma data v√°lida no calend√°rio
                    try:
                        test_date = datetime(year_int, month_int, day_int)
                        
                        # Verificar se n√£o √© uma data muito no futuro ou passado
                        today = datetime.now()
                        if test_date.year < 2020 or test_date.year > today.year + 2:
                            continue
                            
                        formatted_date = f"{day.zfill(2)}/{month.zfill(2)}/{year}"
                        return formatted_date
                        
                    except ValueError:
                        # Data inv√°lida (ex: 31/02)
                        continue
                        
                except (ValueError, IndexError):
                    continue
        
        return None

    def _extract_all_values(self, text: str) -> List[float]:
        """Extrai todos os valores monet√°rios de uma linha"""
        
        values = []
        
        for pattern in self.value_patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                try:
                    # Limpar e converter valor
                    clean_value = match.replace('R$', '').replace(' ', '')
                    
                    # Converter formato brasileiro para float
                    if ',' in clean_value and '.' in clean_value:
                        # Formato: 1.000,00
                        clean_value = clean_value.replace('.', '').replace(',', '.')
                    elif ',' in clean_value:
                        # Formato: 1000,00
                        clean_value = clean_value.replace(',', '.')
                    
                    value = float(clean_value)
                    if value > 0:
                        values.append(value)
                        
                except (ValueError, AttributeError):
                    continue
        
        return values

    def _is_valid_date(self, date_str: str) -> bool:
        """Valida se uma string representa uma data v√°lida"""
        try:
            # Tentar converter a data para verificar se √© v√°lida
            datetime.strptime(date_str, '%d/%m/%Y')
            return True
        except (ValueError, TypeError):
            return False

    def _clean_and_sort_transactions(self, transactions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Remove duplicatas e ordena transa√ß√µes por data, validando datas"""
        
        if not transactions:
            return []
        
        # Filtrar transa√ß√µes com datas v√°lidas primeiro
        valid_transactions = []
        invalid_count = 0
        
        for transaction in transactions:
            if self._is_valid_date(transaction.get('data', '')):
                valid_transactions.append(transaction)
            else:
                invalid_count += 1
                if self.debug_mode:
                    try:
                        st.warning(f"‚ö†Ô∏è Data inv√°lida ignorada: {transaction.get('data', 'N/A')}")
                    except NameError:
                        print(f"‚ö†Ô∏è Data inv√°lida ignorada: {transaction.get('data', 'N/A')}")
        
        if invalid_count > 0:
            try:
                st.info(f"üìÖ {invalid_count} transa√ß√£o(√µes) com datas inv√°lidas foram ignoradas")
            except NameError:
                print(f"üìÖ {invalid_count} transa√ß√£o(√µes) com datas inv√°lidas foram ignoradas")
        
        # Remover duplicatas das transa√ß√µes v√°lidas
        seen = set()
        unique_transactions = []
        
        for transaction in valid_transactions:
            key = (transaction['data'], transaction['tipo'], transaction['valor'])
            if key not in seen:
                seen.add(key)
                unique_transactions.append(transaction)
        
        # Ordenar por data (agora todas as datas s√£o v√°lidas)
        try:
            unique_transactions.sort(key=lambda x: datetime.strptime(x['data'], '%d/%m/%Y'))
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro na ordena√ß√£o por data: {str(e)}")
            # Manter ordem original se n√£o conseguir ordenar
        
        return unique_transactions

    def _show_pdf_help(self):
        """Mostra ajuda para PDFs que n√£o puderam ser processados"""
        
        st.error("‚ùå **N√£o foi poss√≠vel extrair transa√ß√µes do PDF**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üîß Poss√≠veis solu√ß√µes:**
            
            1. **PDF Escaneado:** 
               - Converta para PDF com texto selecion√°vel
               - Use ferramentas: PDF24, SmallPDF, ILovePDF
            
            2. **Formato n√£o padr√£o:**
               - Verifique se √© um extrato banc√°rio brasileiro
               - Confirme formato de data: DD/MM/AAAA
            """)
        
        with col2:
            st.markdown("""
            **‚úÖ Formatos suportados:**
            
            - PDFs com texto selecion√°vel
            - Extratos banc√°rios brasileiros
            - Datas: DD/MM/AAAA
            - Valores: R$ 1.000,00 ou 1.000,00
            
            **‚ùå N√£o suportado:**
            - PDFs escaneados (imagens)
            - Formatos propriet√°rios
            """)
        
        st.info("""
        **üí° Dica:** Teste selecionando texto no PDF. Se conseguir selecionar, 
        a aplica√ß√£o deveria conseguir processar. Se n√£o conseguir selecionar texto, 
        √© um PDF escaneado que precisa ser convertido.
        """)