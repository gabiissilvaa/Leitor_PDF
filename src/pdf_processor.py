import pdfplumber
import re
import io
from datetime import datetime
from typing import List, Dict, Any
import streamlit as st
import os
import platform

try:
    import pytesseract
    from PIL import Image
    import fitz  # PyMuPDF
    
    # Configurar caminho do Tesseract no Windows
    if platform.system() == 'Windows':
        possible_paths = [
            r'C:\Program Files\Tesseract-OCR\tesseract.exe',
            r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe',
            r'C:\Tesseract-OCR\tesseract.exe'
        ]
        
        tesseract_path = None
        for path in possible_paths:
            if os.path.exists(path):
                tesseract_path = path
                break
        
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            OCR_AVAILABLE = True
        else:
            OCR_AVAILABLE = False
    else:
        OCR_AVAILABLE = True
        
except ImportError:
    OCR_AVAILABLE = False

class PDFProcessor:
    """Classe respons√°vel por processar PDFs e extrair transa√ß√µes banc√°rias"""
    
    def __init__(self):
        # Padr√µes regex para diferentes formatos de data (mais abrangentes)
        self.date_patterns = [
            r'(\d{2})/(\d{2})/(\d{4})',      # DD/MM/YYYY
            r'(\d{2})/(\d{2})/(\d{2})',      # DD/MM/YY
            r'(\d{2})-(\d{2})-(\d{4})',      # DD-MM-YYYY
            r'(\d{2})\.(\d{2})\.(\d{4})',    # DD.MM.YYYY
            r'(\d{1,2})/(\d{1,2})/(\d{4})',  # D/M/YYYY ou DD/M/YYYY
            r'(\d{2})\s+(\d{2})\s+(\d{4})',  # DD MM YYYY (com espa√ßos)
            r'(\d{2})(\d{2})(\d{4})',        # DDMMYYYY (sem separadores)
        ]
        
        # Padr√µes para valores monet√°rios (mais robustos)
        self.value_patterns = [
            r'R\$\s*(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)',          # R$ 1.234,56
            r'R\$\s*(\d+,\d{2})',                               # R$ 123,45
            r'(\d{1,3}(?:\.\d{3})*,\d{2})',                     # 1.234,56
            r'(\d+,\d{2})',                                     # 123,45
            r'(\d{1,3}(?:\.\d{3})*\.\d{2})',                    # 1.234.56 (formato americano)
            r'(\d+\.\d{2})',                                    # 123.45 (formato americano)
            r'(\d{1,3}(?:\s\d{3})*,\d{2})',                     # 1 234,56 (com espa√ßos)
        ]
        
        # Palavras-chave para identificar cr√©ditos (mais abrangentes)
        self.credit_keywords = [
            'deposito', 'dep√≥sito', 'credito', 'cr√©dito', 'entrada',
            'transferencia recebida', 'transfer√™ncia recebida', 
            'pix recebido', 'ted recebida', 'doc recebido',
            'salario', 'sal√°rio', 'rendimento', 'aplicacao', 'aplica√ß√£o',
            'resgate', 'estorno', 'devolucao', 'devolu√ß√£o',
            'receita', 'recebimento', 'pagamento recebido',
            'deposito em dinheiro', 'credito automatico', 'cr√©dito autom√°tico'
        ]
        
        # Palavras-chave para identificar d√©bitos (mais abrangentes)
        self.debit_keywords = [
            'debito', 'd√©bito', 'saida', 'sa√≠da', 'saque',
            'transferencia enviada', 'transfer√™ncia enviada',
            'pix enviado', 'ted enviada', 'doc enviado',
            'pagamento', 'compra', 'tarifa', 'taxa', 'juros',
            'anuidade', 'manutencao', 'manuten√ß√£o', 'cobranca', 'cobran√ßa',
            'debito automatico', 'd√©bito autom√°tico', 'cartao',
            'cart√£o', 'financiamento', 'emprestimo', 'empr√©stimo'
        ]
        
        # Padr√µes de linha de extrato (para identificar linhas com transa√ß√µes)
        self.transaction_line_patterns = [
            r'\d{2}/\d{2}.*\d+[,\.]\d{2}',  # Data seguida de valor
            r'R\$.*\d+[,\.]\d{2}',          # Qualquer linha com R$ e valor
            r'\d+[,\.]\d{2}.*[CD]',         # Valor seguido de C ou D
        ]
    
    def extract_transactions(self, uploaded_file) -> List[Dict[str, Any]]:
        """Extrai transa√ß√µes do arquivo PDF com suporte a OCR para PDFs escaneados"""
        transactions = []
        
        try:
            # Mostrar progresso na interface
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            status_text.text('üìÑ Analisando tipo de PDF...')
            progress_bar.progress(5)
            
            # Primeiro, tentar extra√ß√£o normal (texto selecion√°vel)
            text_extracted = False
            total_text_length = 0
            
            with pdfplumber.open(uploaded_file) as pdf:
                total_pages = len(pdf.pages)
                
                # Testar se h√° texto selecion√°vel nas primeiras p√°ginas
                for i in range(min(3, total_pages)):
                    page_text = pdf.pages[i].extract_text()
                    if page_text and page_text.strip():
                        total_text_length += len(page_text.strip())
                
                text_extracted = total_text_length > 100  # Pelo menos 100 caracteres
            
            # Decidir m√©todo de extra√ß√£o
            if text_extracted:
                st.info("‚úÖ **PDF com texto selecion√°vel detectado** - usando extra√ß√£o direta")
                transactions = self._extract_with_text_method(uploaded_file, progress_bar, status_text)
            else:
                if OCR_AVAILABLE:
                    st.warning("üì∏ **PDF escaneado/imagem detectado** - usando OCR (mais lento)")
                    transactions = self._extract_with_ocr_method(uploaded_file, progress_bar, status_text)
                else:
                    st.error("‚ùå **PDF escaneado detectado mas OCR n√£o dispon√≠vel**")
                    st.markdown("""
                    **Para processar PDFs escaneados, instale as depend√™ncias OCR:**
                    ```bash
                    pip install pytesseract Pillow PyMuPDF
                    ```
                    
                    **No Windows, tamb√©m instale o Tesseract:**
                    1. Baixe: https://github.com/UB-Mannheim/tesseract/wiki
                    2. Instale o execut√°vel
                    3. Adicione ao PATH do sistema
                    """)
                    return []
                
        except Exception as e:
            st.error(f"‚ùå Erro ao processar o PDF: {str(e)}")
            
        return transactions
    
    def _extract_with_text_method(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """M√©todo de extra√ß√£o para PDFs com texto selecion√°vel"""
        
        with pdfplumber.open(uploaded_file) as pdf:
            total_pages = len(pdf.pages)
            
            # Alerta para arquivos grandes
            if total_pages > 50:
                st.warning(f"‚ö†Ô∏è Arquivo grande detectado ({total_pages} p√°ginas). O processamento pode levar alguns minutos...")
            elif total_pages > 20:
                st.info(f"üìñ Processando arquivo m√©dio ({total_pages} p√°ginas)...")
            
            status_text.text(f'üìñ Processando {total_pages} p√°gina(s)...')
            progress_bar.progress(10)
            
            # Processar p√°ginas em lotes
            batch_size = 5
            all_transactions = []
            
            for batch_start in range(0, total_pages, batch_size):
                batch_end = min(batch_start + batch_size, total_pages)
                batch_text = ""
                
                # Processar lote atual
                for page_num in range(batch_start, batch_end):
                    try:
                        page = pdf.pages[page_num]
                        page_text = page.extract_text()
                        if page_text:
                            batch_text += page_text + "\n"
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Erro na p√°gina {page_num + 1}: {str(e)}")
                        continue
                    
                    # Atualizar progresso
                    progress = 10 + (page_num + 1) * 70 // total_pages
                    progress_bar.progress(progress)
                    status_text.text(f'üìñ P√°gina {page_num + 1}/{total_pages}...')
                
                # Processar transa√ß√µes do lote atual
                if batch_text.strip():
                    batch_transactions = self._parse_transactions_batch(
                        batch_text, 
                        f"Lote {batch_start//batch_size + 1}"
                    )
                    all_transactions.extend(batch_transactions)
                
                # Limpar mem√≥ria do lote
                del batch_text
            
            status_text.text('üîç Finalizando an√°lise...')
            progress_bar.progress(90)
            
            # Remover duplicatas e ordenar
            transactions = self._clean_and_sort_transactions(all_transactions)
            
            progress_bar.progress(100)
            status_text.success(f'üéâ Processamento conclu√≠do! {len(transactions)} transa√ß√µes encontradas')
            
            return transactions
    
    def _check_ocr_availability(self) -> bool:
        """Verifica se o OCR est√° dispon√≠vel e exibe informa√ß√µes de diagn√≥stico"""
        if not OCR_AVAILABLE:
            st.error("üö´ **OCR (Reconhecimento √ìptico) Indispon√≠vel**")
            
            # Verificar se pytesseract est√° instalado
            try:
                import pytesseract
                st.warning("‚ö° pytesseract instalado, mas **Tesseract execut√°vel n√£o encontrado**")
                
                if platform.system() == 'Windows':
                    st.info("ÔøΩ **Instala√ß√£o R√°pida do Tesseract (Windows):**")
                    
                    col1, col2 = st.columns([2, 1])
                    with col1:
                        st.markdown("""
                        **M√©todo Recomendado:**
                        1. üì• [Baixar Tesseract OCR](https://github.com/UB-Mannheim/tesseract/releases/download/v5.3.3.20231005/tesseract-ocr-w64-setup-5.3.3.20231005.exe)
                        2. ‚öôÔ∏è Executar o instalador como **Administrador**
                        3. üîÑ Reiniciar esta aplica√ß√£o
                        """)
                    
                    with col2:
                        if st.button("üìã Copiar Link", key="copy_tesseract_link"):
                            st.code("https://github.com/UB-Mannheim/tesseract/releases")
                    
                    st.warning("‚è±Ô∏è **Enquanto isso:** Use apenas PDFs com **texto selecion√°vel** (n√£o escaneados)")
                    
                else:
                    st.info("üêß **Para Linux/Mac:**")
                    st.code("sudo apt install tesseract-ocr tesseract-ocr-por  # Ubuntu/Debian")
                    st.code("brew install tesseract tesseract-lang  # macOS")
                    
            except ImportError:
                st.error("‚ùå **pytesseract n√£o instalado**")
                st.code("pip install pytesseract")
                
            return False
        
        # Tesseract dispon√≠vel - mostrar informa√ß√£o
        st.success("ü§ñ **OCR Ativo** - Suporte para PDFs escaneados habilitado!")
        return True

    def _extract_with_ocr_method(self, uploaded_file, progress_bar, status_text) -> List[Dict[str, Any]]:
        """M√©todo de extra√ß√£o usando OCR com tratamento robusto de erros MuPDF"""
        
        if not self._check_ocr_availability():
            return []
        
        st.info("ü§ñ **Inicializando OCR com prote√ß√£o contra erros MuPDF...**")
        
        # M√∫ltiplas tentativas de abertura do PDF
        doc = None
        uploaded_file.seek(0)
        
        try:
            # Tentativa 1: Abertura padr√£o
            doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
            st.success("‚úÖ PDF aberto com m√©todo padr√£o")
        except Exception as e1:
            st.warning(f"‚ö†Ô∏è M√©todo padr√£o falhou: {str(e1)}")
            
            try:
                # Tentativa 2: For√ßar como documento
                uploaded_file.seek(0)
                doc = fitz.Document(stream=uploaded_file.read())
                st.success("‚úÖ PDF aberto com m√©todo alternativo")
            except Exception as e2:
                st.error(f"‚ùå N√£o foi poss√≠vel abrir o PDF: {str(e2)}")
                return []
        
        total_pages = len(doc)
        
        if total_pages > 20:
            st.warning(f"ÔøΩ **OCR em {total_pages} p√°ginas** - isso pode levar v√°rios minutos...")
        
        status_text.text(f'üñºÔ∏è Convertendo {total_pages} p√°gina(s) para imagem...')
        progress_bar.progress(10)
        
        all_transactions = []
        
        for page_num in range(total_pages):
            try:
                # Converter p√°gina para imagem com prote√ß√£o contra erros MuPDF
                page = doc.load_page(page_num)
                
                # M√∫ltiplas estrat√©gias para contornar erro XObject
                img_data = None
                
                # Estrat√©gia 1: Tentar com matriz padr√£o
                try:
                    mat = fitz.Matrix(2.0, 2.0)
                    pix = page.get_pixmap(matrix=mat)
                    img_data = pix.tobytes("png")
                except Exception as e1:
                    st.warning(f"‚ö†Ô∏è Estrat√©gia 1 falhou p√°gina {page_num + 1}: {str(e1)[:50]}")
                    
                    # Estrat√©gia 2: Sem matriz (resolu√ß√£o padr√£o)
                    try:
                        pix = page.get_pixmap()
                        img_data = pix.tobytes("png")
                    except Exception as e2:
                        st.warning(f"‚ö†Ô∏è Estrat√©gia 2 falhou p√°gina {page_num + 1}: {str(e2)[:50]}")
                        
                        # Estrat√©gia 3: For√ßar RGB sem alpha
                        try:
                            pix = page.get_pixmap(alpha=False, colorspace=fitz.csRGB)
                            img_data = pix.tobytes("png")
                        except Exception as e3:
                            st.error(f"‚ùå Todas estrat√©gias falharam p√°gina {page_num + 1}")
                            continue
                
                if not img_data:
                    st.error(f"‚ùå Imposs√≠vel converter p√°gina {page_num + 1}")
                    continue
                
                # Converter para PIL Image
                image = Image.open(io.BytesIO(img_data))
                
                # Aplicar OCR
                status_text.text(f'ü§ñ OCR p√°gina {page_num + 1}/{total_pages}...')
                
                # Configurar Tesseract para portugu√™s
                custom_config = r'--oem 3 --psm 6 -l por'
                try:
                    ocr_text = pytesseract.image_to_string(image, config=custom_config)
                except:
                    # Fallback para ingl√™s se portugu√™s n√£o estiver dispon√≠vel
                    ocr_text = pytesseract.image_to_string(image)
                
                # Processar texto extra√≠do por OCR
                if ocr_text.strip():
                    batch_transactions = self._parse_transactions_batch(
                        ocr_text, 
                        f"OCR P√°gina {page_num + 1}"
                    )
                    all_transactions.extend(batch_transactions)
                
                # Atualizar progresso
                progress = 10 + (page_num + 1) * 70 // total_pages
                progress_bar.progress(progress)
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro OCR na p√°gina {page_num + 1}: {str(e)}")
                continue
        
        doc.close()
        
        status_text.text('üîç Finalizando an√°lise OCR...')
        progress_bar.progress(90)
        
        # Remover duplicatas e ordenar
        transactions = self._clean_and_sort_transactions(all_transactions)
        
        progress_bar.progress(100)
        status_text.success(f'üéâ OCR conclu√≠do! {len(transactions)} transa√ß√µes encontradas')
        
        # Mostrar estat√≠sticas OCR
        if total_pages > 10:
            st.info(f"ü§ñ **OCR Statistics:**\n"
                   f"- üìÑ {total_pages} p√°ginas processadas com OCR\n"
                   f"- üìã {len(transactions)} transa√ß√µes extra√≠das\n"
                   f"- ‚ö° Qualidade: {'Alta' if len(transactions) > total_pages else 'M√©dia'}")
        
        return transactions
    
    def _parse_transactions(self, text: str) -> List[Dict[str, Any]]:
        """Analisa o texto e extrai as transa√ß√µes"""
        transactions = []
        lines = text.split('\n')
        
        # Mostrar detalhes do processamento na interface
        st.write("üîç **Detalhes do Processamento:**")
        
        # Container para mostrar transa√ß√µes encontradas em tempo real
        transaction_container = st.container()
        found_transactions = []
        
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            # Tentar extrair data da linha
            date = self._extract_date(line)
            if date:
                # Procurar informa√ß√µes da transa√ß√£o nas pr√≥ximas linhas
                transaction_info = self._extract_transaction_info(
                    lines[i:i+5], date  # Analisar at√© 5 linhas seguintes
                )
                
                if transaction_info:
                    transactions.append(transaction_info)
                    found_transactions.append(transaction_info)
                    
                    # Mostrar transa√ß√£o encontrada na interface
                    with transaction_container:
                        cols = st.columns([2, 3, 1, 1])
                        with cols[0]:
                            st.write(f"üìÖ {transaction_info['data']}")
                        with cols[1]:
                            st.write(f"üìù {transaction_info['descricao'][:30]}...")
                        with cols[2]:
                            color = "üü¢" if transaction_info['tipo'] == 'Cr√©dito' else "üî¥"
                            st.write(f"{color} {transaction_info['tipo']}")
                        with cols[3]:
                            st.write(f"üí∞ R$ {transaction_info['valor']:,.2f}")
        
        # Resumo final
        if transactions:
            st.success(f"‚úÖ **Total de {len(transactions)} transa√ß√µes processadas com sucesso!**")
            
            # Mostrar resumo r√°pido
            total_credit = sum(t['valor'] for t in transactions if t['tipo'] == 'Cr√©dito')
            total_debit = sum(t['valor'] for t in transactions if t['tipo'] == 'D√©bito')
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üíö Total Cr√©ditos", f"R$ {total_credit:,.2f}")
            with col2:
                st.metric("üî¥ Total D√©bitos", f"R$ {total_debit:,.2f}")
            with col3:
                st.metric("‚öñÔ∏è Saldo Geral", f"R$ {total_credit - total_debit:,.2f}")
        else:
            st.warning("‚ö†Ô∏è Nenhuma transa√ß√£o foi encontrada no arquivo PDF.")
            st.info("üí° **Dicas:**\n- Verifique se o PDF cont√©m dados de extrato banc√°rio\n- Certifique-se de que o arquivo n√£o est√° protegido por senha\n- Teste com um arquivo diferente")
        
        return transactions
    
    def _parse_transactions_batch(self, text: str, batch_name: str) -> List[Dict[str, Any]]:
        """Processa transa√ß√µes de um lote de p√°ginas com diagn√≥stico detalhado"""
        transactions = []
        lines = text.split('\n')
        
        # Mostrar diagn√≥stico do conte√∫do
        st.write(f"üîç **Analisando {batch_name}:**")
        
        # Diagn√≥stico inicial
        diagnostic_container = st.container()
        with diagnostic_container:
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìÑ Linhas", len(lines))
            with col2:
                non_empty_lines = len([l for l in lines if l.strip()])
                st.metric("üìù Linhas com conte√∫do", non_empty_lines)
            with col3:
                st.metric("üîç Datas encontradas", 0)  # Ser√° atualizado
        
        # Mostrar amostra do conte√∫do extra√≠do
        if lines:
            with st.expander(f"ÔøΩ Amostra do conte√∫do extra√≠do ({batch_name})"):
                sample_lines = [line.strip() for line in lines[:20] if line.strip()]
                if sample_lines:
                    for i, line in enumerate(sample_lines):
                        st.text(f"{i+1:2d}: {line}")
                else:
                    st.warning("‚ùå Nenhum texto leg√≠vel encontrado neste lote")
        
        # Contadores para diagn√≥stico
        dates_found = 0
        values_found = 0
        potential_transactions = 0
        
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            # Debug: verificar se encontra datas
            date = self._extract_date(line)
            if date:
                dates_found += 1
                st.write(f"üìÖ **Data encontrada:** {date} na linha: `{line}`")
                
                # Procurar informa√ß√µes da transa√ß√£o nas pr√≥ximas linhas
                context_lines = lines[i:i+5]
                transaction_info = self._extract_transaction_info(context_lines, date)
                
                if transaction_info:
                    transactions.append(transaction_info)
                    potential_transactions += 1
                    
                    # Mostrar transa√ß√£o encontrada
                    st.success(f"‚úÖ **Transa√ß√£o {potential_transactions}:**\n"
                              f"üìÖ Data: {transaction_info['data']}\n"
                              f"üìù Descri√ß√£o: {transaction_info['descricao']}\n"
                              f"üí∞ Valor: R$ {transaction_info['valor']:,.2f}\n"
                              f"üè∑Ô∏è Tipo: {transaction_info['tipo']}")
                else:
                    st.warning(f"‚ö†Ô∏è Data encontrada mas sem informa√ß√µes de transa√ß√£o:\n"
                              f"Contexto: {' | '.join(context_lines)}")
            else:
                # Debug: verificar se h√° valores monet√°rios na linha
                if self._extract_value(line) > 0:
                    values_found += 1
                    if values_found <= 5:  # Mostrar apenas os primeiros 5
                        st.info(f"üí∞ **Valor encontrado sem data:** R$ {self._extract_value(line):,.2f} na linha: `{line}`")
        
        # Atualizar m√©tricas de diagn√≥stico
        with diagnostic_container:
            col1, col2, col3 = st.columns(3)
            with col3:
                st.metric("üîç Datas encontradas", dates_found)
        
        # Resumo do diagn√≥stico
        if dates_found == 0:
            st.error("‚ùå **Problema identificado: Nenhuma data encontrada!**")
            st.markdown("""
            **Poss√≠veis causas:**
            - Formato de data n√£o reconhecido
            - PDF pode ser uma imagem escaneada
            - Texto n√£o est√° em formato selecion√°vel
            
            **Formatos de data suportados:**
            - DD/MM/AAAA (ex: 15/10/2024)
            - DD/MM/AA (ex: 15/10/24)  
            - DD-MM-AAAA (ex: 15-10-2024)
            - DD.MM.AAAA (ex: 15.10.2024)
            """)
            
            # Tentar m√©todo alternativo
            st.write("üîÑ **Executando diagn√≥stico avan√ßado...**")
            alternative_results = self._alternative_extraction(text)
            
        elif values_found == 0:
            st.error("‚ùå **Problema identificado: Nenhum valor monet√°rio encontrado!**")
            st.markdown("""
            **Poss√≠veis causas:**
            - Formato de valor n√£o reconhecido
            - Valores podem estar em formato diferente
            
            **Formatos de valor suportados:**
            - R$ 1.234,56
            - 1.234,56
            - 123,45
            """)
            
            # Tentar m√©todo alternativo
            st.write("üîÑ **Executando diagn√≥stico avan√ßado...**")
            alternative_results = self._alternative_extraction(text)
            
        elif transactions:
            st.success(f"‚úÖ **{len(transactions)} transa√ß√µes extra√≠das com sucesso neste lote!**")
        else:
            st.warning("‚ö†Ô∏è **Datas e valores encontrados, mas n√£o foi poss√≠vel formar transa√ß√µes completas**")
            
            # Tentar m√©todo alternativo
            st.write("üîÑ **Executando diagn√≥stico avan√ßado...**")
            alternative_results = self._alternative_extraction(text)
        
        return transactions
    
    def _alternative_extraction(self, text: str) -> List[Dict[str, Any]]:
        """M√©todo alternativo de extra√ß√£o usando diferentes abordagens"""
        transactions = []
        
        st.write("üîÑ **Tentando m√©todos alternativos de extra√ß√£o...**")
        
        # M√©todo 1: Buscar por linhas que parecem transa√ß√µes
        lines = text.split('\n')
        potential_transaction_lines = []
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # Verificar se a linha cont√©m padr√µes de transa√ß√£o
            for pattern in self.transaction_line_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    potential_transaction_lines.append(line)
                    break
        
        st.info(f"üìã **M√©todo 1:** Encontradas {len(potential_transaction_lines)} linhas com padr√£o de transa√ß√£o")
        
        if potential_transaction_lines:
            with st.expander("üîç Linhas identificadas como poss√≠veis transa√ß√µes"):
                for i, line in enumerate(potential_transaction_lines[:10]):
                    st.text(f"{i+1}: {line}")
        
        # M√©todo 2: Buscar por qualquer sequ√™ncia de data + texto + valor
        st.write("üîÑ **M√©todo 2:** Busca por padr√µes data-texto-valor")
        
        date_value_pairs = []
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # Buscar data na linha
            date = self._extract_date(line)
            value = self._extract_value(line)
            
            if date and value > 0:
                date_value_pairs.append({
                    'linha': line,
                    'data': date,
                    'valor': value
                })
        
        st.info(f"üí∞ **M√©todo 2:** Encontrados {len(date_value_pairs)} pares data-valor")
        
        if date_value_pairs:
            with st.expander("üìä Pares data-valor encontrados"):
                for pair in date_value_pairs[:10]:
                    st.text(f"üìÖ {pair['data']} - üí∞ R$ {pair['valor']:,.2f} - {pair['linha']}")
        
        # M√©todo 3: An√°lise de padr√µes por banco espec√≠fico
        st.write("üîÑ **M√©todo 3:** Detectar formato de banco espec√≠fico")
        
        # Detectar poss√≠vel banco baseado em palavras-chave
        bank_patterns = {
            'Banco do Brasil': ['banco do brasil', 'bb ', 'conta corrente bb'],
            'Caixa': ['caixa economica', 'cef', 'caixa federal'],
            'Ita√∫': ['itau', 'ita√∫', 'banco itau'],
            'Bradesco': ['bradesco', 'banco bradesco'],
            'Santander': ['santander', 'banco santander'],
            'Nubank': ['nubank', 'nu pagamentos']
        }
        
        detected_bank = None
        text_lower = text.lower()
        
        for bank_name, keywords in bank_patterns.items():
            if any(keyword in text_lower for keyword in keywords):
                detected_bank = bank_name
                break
        
        if detected_bank:
            st.success(f"üè¶ **Banco detectado:** {detected_bank}")
        else:
            st.info("üè¶ **Banco n√£o identificado** - usando padr√µes gen√©ricos")
        
        return transactions
    
    def _clean_and_sort_transactions(self, transactions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Remove duplicatas e ordena transa√ß√µes por data"""
        if not transactions:
            return []
        
        # Remover duplicatas baseado em data, valor e descri√ß√£o
        unique_transactions = []
        seen = set()
        
        for transaction in transactions:
            key = (
                transaction['data'], 
                transaction['valor'], 
                transaction['descricao'][:20]  # Usar apenas parte da descri√ß√£o
            )
            
            if key not in seen:
                seen.add(key)
                unique_transactions.append(transaction)
        
        # Ordenar por data
        try:
            unique_transactions.sort(key=lambda x: datetime.strptime(x['data'], '%d/%m/%Y'))
        except ValueError:
            # Se falhar, manter ordem original
            pass
        
        return unique_transactions
    
    def _extract_date(self, text: str) -> str:
        """Extrai data do texto"""
        for pattern in self.date_patterns:
            match = re.search(pattern, text)
            if match:
                day, month, year = match.groups()
                
                # Ajustar ano se necess√°rio (YY -> YYYY)
                if len(year) == 2:
                    current_year = datetime.now().year
                    year_int = int(year)
                    if year_int <= (current_year % 100):
                        year = f"20{year}"
                    else:
                        year = f"19{year}"
                
                return f"{day}/{month}/{year}"
        
        return None
    
    def _extract_value(self, text: str) -> float:
        """Extrai valor monet√°rio do texto com melhor tratamento"""
        found_values = []
        
        for pattern in self.value_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                for match in matches:
                    try:
                        # Limpar e normalizar o valor
                        clean_value = str(match).strip()
                        
                        # Remover caracteres n√£o num√©ricos exceto v√≠rgula e ponto
                        clean_value = re.sub(r'[^\d,.]', '', clean_value)
                        
                        # Tratar diferentes formatos
                        if ',' in clean_value and '.' in clean_value:
                            # Formato brasileiro: 1.234,56
                            if clean_value.rfind(',') > clean_value.rfind('.'):
                                clean_value = clean_value.replace('.', '').replace(',', '.')
                            # Formato americano: 1,234.56  
                            else:
                                clean_value = clean_value.replace(',', '')
                        elif ',' in clean_value:
                            # Apenas v√≠rgula: assumir formato brasileiro
                            clean_value = clean_value.replace(',', '.')
                        
                        # Converter para float
                        value = float(clean_value)
                        if value > 0:  # Apenas valores positivos
                            found_values.append(value)
                            
                    except (ValueError, TypeError):
                        continue
        
        # Retornar o maior valor encontrado (mais prov√°vel de ser a transa√ß√£o principal)
        return max(found_values) if found_values else 0.0
    
    def _determine_transaction_type(self, text: str) -> str:
        """Determina se a transa√ß√£o √© cr√©dito ou d√©bito"""
        text_lower = text.lower()
        
        # Verificar palavras-chave de cr√©dito
        for keyword in self.credit_keywords:
            if keyword in text_lower:
                return 'Cr√©dito'
        
        # Verificar palavras-chave de d√©bito
        for keyword in self.debit_keywords:
            if keyword in text_lower:
                return 'D√©bito'
        
        # Verificar sinais espec√≠ficos
        if any(sign in text for sign in ['+', 'C']):
            return 'Cr√©dito'
        elif any(sign in text for sign in ['-', 'D']):
            return 'D√©bito'
        
        # Padr√£o: se n√£o identificado, assumir d√©bito
        return 'D√©bito'
    
    def _extract_description(self, lines: List[str]) -> str:
        """Extrai descri√ß√£o da transa√ß√£o"""
        description_parts = []
        
        for line in lines:
            line = line.strip()
            if line and not re.search(r'\d{2}/\d{2}/\d{4}', line):
                # Remover valores monet√°rios da descri√ß√£o
                clean_line = re.sub(r'R\$\s*\d+[.,]\d+', '', line)
                clean_line = re.sub(r'\d+[.,]\d+', '', clean_line)
                clean_line = clean_line.strip()
                
                if clean_line and len(clean_line) > 3:
                    description_parts.append(clean_line)
        
        return ' '.join(description_parts[:3])  # Limitar a 3 partes
    
    def _extract_transaction_info(self, lines: List[str], date: str) -> Dict[str, Any]:
        """Extrai informa√ß√µes completas da transa√ß√£o"""
        combined_text = ' '.join(lines)
        
        # Extrair valor
        value = self._extract_value(combined_text)
        if value == 0.0:
            return None
        
        # Determinar tipo
        transaction_type = self._determine_transaction_type(combined_text)
        
        # Extrair descri√ß√£o
        description = self._extract_description(lines[1:])  # Pular a primeira linha (data)
        
        return {
            'data': date,
            'descricao': description or 'Transa√ß√£o n√£o identificada',
            'tipo': transaction_type,
            'valor': value
        }